<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <!-- <link rel="stylesheet" href="../css/materialize.css"> -->
    <!-- <link rel="stylesheet" type="text/css" href="../css/admin.css"> -->
    <link rel="stylesheet" type="text/css" href="../css/mapa.css">
    <link rel="stylesheet" type="text/css" href="../css/semantic.min.css">
    <!-- <link rel="stylesheet" type="text/css" href="../css/style.css"> -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.3/dist/leaflet.css"
    integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
    crossorigin=""/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.2/leaflet.draw.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.Default.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.css">
    <link rel="stylesheet" href="../../css/semantic.min.css">
    <link rel="stylesheet" href="../../css/style.css">
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="../js/jquery-3.3.1.min.js"></script>
    <!-- <script type="text/javascript" src="../js/materialize.js"></script> -->
    
    <style>
       #map {
        margin: 0px;
        height: 100%;
        width: 100%;
       }
    </style>
  </head>
  <body>
    

      <div style="z-index: 100;" class="ui visible left sidebar inverted vertical menu" id="sidebarmapa">
      
      <div class="item">
        <a href="/admin"><img src="../../images/AssinaturaAlternativaBranca.png" style="display: block; margin-left: auto;
    margin-right: auto; width: 100%; height: 100%;" alt=""></a>
        <div class="menu">
          <% if(!sess.login){ %>
            <a href="/login" class="item">Login</a>
          <% }else{ %>
             <a style="font-size: 100%;" href="/" class="item">Voltar para Página Inicial</a>
          <%    }   %>
        </div>
      </div>
  
      <div class="ui select item">
          <a id="botao-menu">Visualização <i class="dropdown icon"></i></a>
          <div id="opcoes" class="menu">
              <div id="botao-marker" class="item pointer">Marcador</div>
              <div id="botao-heat" class="item pointer">Mapa de Calor</div>
          </div>
      </div>

      <div class="ui select item">
          <a id="botao-menu2">Status <i class="dropdown icon"></i></a>
          <div id="opcoes2" class="menu">
              <div id="botao-todas" class="item pointer">Todas</div>
              <div id="botao-solucionado" class="item pointer">Solucionado</div>
              <div id="botao-pendente" class="item pointer">Pendente</div>
              <div id="botao-semsolucao" class="item pointer">Sem solucção</div>
          </div>
      </div>

      <div class="ui select item">
        <a id="botao-menu3">Regiões Administrativas <i class="dropdown icon"></i></a>
        <div id="opcoes3" class="menu">
          <div id="botao-guara" class="item pointer">Guará</div>
          <div id="botao-cruzeiro" class="item pointer">Cruzeiro</div>
          <div id="botao-plano" class="item pointer">Plano Piloto</div>
          <div id="botao-parque" class="item pointer">Parque Pinheiros</div>
          <div id="botao-gama" class="item pointer">Gama</div>
          <div id="botao-taguatinga" class="item pointer">Taguatinga</div>
          <div id="botao-brazlandia" class="item pointer">Brazlândia</div>
          <div id="botao-sobradinho" class="item pointer">Sobradinho</div>
          <div id="botao-planaltina" class="item pointer">Planaltina</div>
          <div id="botao-paranoa" class="item pointer">Paranoá</div>
          <div id="botao-sudoeste" class="item pointer">Sudoeste</div>
          <div id="botao-candangolandia" class="item pointer">Candangolândia</div>
          <div id="botao-sia" class="item pointer">SIA</div>
          <div id="botao-estrutural" class="item pointer">Estrutural</div>
          <div id="botao-nb" class="item pointer">Núcleo Bandeirante</div>
          <div id="botao-aguasclaras" class="item pointer">Águas Claras</div>
          <div id="botao-vicente" class="item pointer">Vicente Pires</div>
        </div>
      </div>
      
      <br>
      </div>
<!--       
      <a class="btn-floating btn-large waves-effect waves-light modal-trigger red add" onclick="addMark();"><i class="material-icons" onclick="">add</i></a> -->
      <% if(sess.login){ %>
      <button class="ui icon button modal-trigger red add" onclick="addMark();">
        <i class="plus icon"></i>
      </button>
      <% } %>
      
      <div class="pusher" id="map" ></div>
      
      <!-- Modal Structure -->
      <div id="modal1" style="z-index: 90;" class="ui modal">
        <div class="modal-content">
          <form class="ui form" method="post" action="/denuncias">
      
              <h1 class="ui dividing header">Registrar Denúncia</h1>
              <div class="content">
              <div class="field"> 
                        
                    <label>Data ocorreu</label>
                    <input type="text" placeholder="dd/mm/aaaa" name="dataocorreu" class="date">
                      
              </div>

              <div class="field">
                  
                  <label>Hora que ocorreu</label>
                  <input type="text" placeholder="hh:mm:ss" name="horaocorreu" class="time">
                  
              </div>
      
              <div class="field">  
                
                <select name="desordem">
                    <option value="" disabled selected>Selecione a Desordem</option>
                    <% if(desordens){ 
                        for(var i = 0; i < desordens.length; i++){%>
                            <option value=<%= desordens[i].des_iddesordem %> ><%= desordens[i].des_descricao %></option>
                        <% }} %>
                </select>
               
              </div>

               <div class="field">
                  
                    <label >Descrição</label>
                    <textarea  name="descricao" type="text"  class="materialize-textarea"></textarea>
                  
              </div>
      
               <div class="field">
                  
                    <label>Anonimato</label>
                    <input placeholder="anonimato" name="anonimato" type="number" class="validate">
                  
              </div>

              <div style="display: none;">
                <input name="latitude" id="latitudemp" type="text" value=" ">
                <input name="longitude" id="longitudemp" type="text" value=" ">
              </div>

            </div>
            <div class="modal-footer">
                
                <button class="ui primary button" type="submit" name="action">Salvar
                </button>

            </div>
          </form>
          </div>
          </div>

          <!-- <button id="hey">asçdfkaçsldfkaçsdlfkçasdlfk</button> -->
    

    <script type="text/javascript" src="../js/init_dom.js"></script>
    <script type="text/javascript" src="../js/jquery.mask.js"></script>
    <script src="../../../js/semantic.min.js" ></script>
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
    integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
    crossorigin=""></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.3.0/dist/leaflet.markercluster.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.2/leaflet.draw.js"></script>
    <script src="../js/leaflet-heat.js"></script>
    <script type="text/javascript">

        $('.ui.dropdown').dropdown();

        $("#botao-menu").click(function(){
            $("#opcoes").toggle(300);
        })

        $("#botao-menu2").click(function(){
            $("#opcoes2").toggle(300);
        })

        $("#botao-menu3").click(function(){
            $("#opcoes3").toggle(300);
        })
            
        document.addEventListener('DOMContentLoaded', function() {
          var elems = document.querySelectorAll('.modal');
        });
        
        var marker_zoom_x;
        var marker_zoom_y;
        var query = <%-JSON.stringify(query)%>;
        var markes = <%-JSON.stringify(pontos)%>;
        var polygons = <%-JSON.stringify(polygons)%>;
        var regioes = <%-JSON.stringify(regioes)%>;

        markes.forEach(function (marker){
          if(marker.den_iddenuncia == query.denuncia){
            marker_zoom_x = marker.st_x;
            marker_zoom_y = marker.st_y;
          }
        })

        if(jQuery.isEmptyObject(query)){
          var map = L.map('map').setView([-15.782759, -47.870619], 13);
        }else{
          var map = L.map('map', {
              center: [marker_zoom_x, marker_zoom_y],
              zoom: 18
          });
        }
        
        // L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        //     attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        // }).addTo(map);

        // Set up the OSM layer
        L.tileLayer(
          'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: 'Data © <a href="http://osm.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        L.drawLocal.draw.toolbar.buttons.polygon = 'Desenhar região de alerta';
    
        var editableLayers = new L.FeatureGroup();
        map.addLayer(editableLayers);
        
        var MyCustomMarker = L.Icon.extend({
            options: {
                shadowUrl: null,
                iconAnchor: new L.Point(8, 8),
                iconSize: new L.Point(20, 20)
            }
        });
        
        var options = {
          position: 'bottomleft',
          draw: {
            polygon: {
              allowIntersection: false, // Restricts shapes to simple polygons
              drawError: {
                color: 'red', // Color the shape will turn when intersects
                message: '<strong>Ops!<strong> Você não pode desenhar isto!' // Message that will show when intersect
              },
              shapeOptions: {
                color: 'red'
              }
            },
            // disable toolbar item by setting it to false
            polyline: false,
            circle: false, // Turns off this drawing tool
            circlemarker: false,
            rectangle: false,
            marker: false,
            },
          edit: {
            featureGroup: editableLayers, //REQUIRED!!
            remove: false
          }
        };
        
        var drawControl = new L.Control.Draw(options);
        map.addControl(drawControl);
        
        map.on(L.Draw.Event.CREATED, function (e) {
            var type = e.layerType,
                layer = e.layer;
            var data = [];        

            e.layer._latlngs.forEach(element => {
              element.forEach(points => {
                // console.log(points.lat);
                data.push([points.lat,points.lng]);
              });
            });
            
            console.log(data);
            var data = JSON.stringify(data);

            $.ajax({
              type: "POST",
              url: "/areas/create",
              data: {data : data},
              success : function(data) {
                alert("Regiao inserida com sucesso");
                location.reload();
              },
            });

            editableLayers.addLayer(layer);
        });
        
        var heat_points = []
        var markersGroup = L.markerClusterGroup();
        var markersSolucionado = [];
        var markersPendente = [];
        var markersSemSolucao = [];
        var markersPlanoPiloto = [];

        function formatDate (input) {
          var datePart = input.match(/\d+/g),
          year = datePart[0].substring(2), // get only two digits
          month = datePart[1], day = datePart[2];

          return day+'/'+month+'/'+year;
        }

        //ADIÇÃO DE MARCADORES NO MAPA
        for(var i = 0; i < markes.length; i++){

          if(markes[i].des_descricao.length > 50){
            var desordem_descricao = markes[i].des_descricao.substr(0, 50) + "...";
          }else{
            var desordem_descricao = markes[i].des_descricao;
          }

          var data_ocorreu = formatDate (markes[i].data_ocorreu);

          //comeca a criar string para pop-pup
          var marker_popup = "<b>" + markes[i].den_status + "</b><hr><span><strong>Descrição: </strong>" + markes[i].den_descricao + "<br><strong>Nível Confiabilidade: </strong>" + markes[i].den_nivel_confiabilidade + "</span><br><span><strong>Desordem: </strong>" + desordem_descricao  +"<br><span><strong>Data que ocorreu: </strong>" + data_ocorreu + "<br><span><strong>Hora que ocorreu: </strong>" + markes[i].hora_ocorreu  + "<br>";
          
          heat_points.push([markes[i].st_x, markes[i].st_y, 7]);
          
          //se denuncia nao for anonima, mostra nome do usuario
          if(markes[i].den_anonimato == 0){
            marker_popup += "<strong>Usuário: </strong>" + "<a href='/usuarios/" + markes[i].usu_idusuario + "/show'>" + markes[i].usu_nome + "</a><br>";
          }

          if(markes[i].den_status == "Solucionado"){
            var data_solucao = formatDate (markes[i].data_solucao);

            marker_popup += "<strong>Data da solução: </strong>" + data_solucao + "<br><strong>Hora Solução: </strong>" + markes[i].hora_solucao + "<br>";
            
            var markerSolucionado = L.marker([markes[i].st_x, markes[i].st_y]);
            marker_popup += "<br><a href=\"/denuncias/" + markes[i].den_iddenuncia + "/show\">Ver denúnica</a>";
            markerSolucionado.bindPopup(marker_popup);
            markersSolucionado.push(markerSolucionado);
          }
          if(markes[i].den_status == "Pendente"){
            var markerPendente = L.marker([markes[i].st_x, markes[i].st_y]);
            marker_popup += "<br><a href=\"/denuncias/" + markes[i].den_iddenuncia + "/show\">Ver denúnica</a>";
            markerPendente.bindPopup(marker_popup);
            // markersSolucionado.addLayer( marker );
            markersPendente.push(markerPendente );
          }
          if(markes[i].den_status == "Sem solução" || markes[i].den_status == 'Com Problemas'){
            var markerSemSolucao = L.marker([markes[i].st_x, markes[i].st_y]);
            marker_popup += "<br><a href=\"/denuncias/" + markes[i].den_iddenuncia + "/show\">Ver denúnica</a>";
            markerSemSolucao.bindPopup(marker_popup);
            // markersSolucionado.addLayer( marker );
            markersSemSolucao.push( markerSemSolucao );
          }
          // else{
          //   var marker = L.marker([markes[i].st_x, markes[i].st_y]);
          //   marker.bindPopup("<b>" + markes[i].den_status + "</b><hr><span>" + markes[i].den_descricao + "</span><br><br><a href=\"/denuncias/" + markes[i].den_iddenuncia + "/show\">Ver denúnica</a>");
          //   // markersSolucionado.addLayer( marker );
          //   markersGroup.addLayer( marker );
          // }
          
          
        }
        markersSolucionado = L.layerGroup(markersSolucionado);
        markersPendente = L.layerGroup(markersPendente);
        markersSemSolucao = L.layerGroup(markersSemSolucao);

        markersGroup.addLayer( markersSolucionado );
        markersGroup.addLayer( markersPendente );
        markersGroup.addLayer( markersSemSolucao );
        
        var heat = L.heatLayer(heat_points, {radius: 20});
        
        var latitude;
        var longitude;
        var isMarker;
        var markers_antigos = [];
        console.log("heyyyy aaa")
        // map.addLayer( heat );
        map.addLayer( markersGroup ); 
        // map.addLayer( markersSolucionado );
        
        //ADIÇÃO DE POLIGONOS NO MAPA
        for(var i = 0; i < polygons.length; i++){
          
          polygons[i].reg_regiao_alerta = polygons[i].reg_regiao_alerta.replace(/\(/g, "[").replace(/\)/g, "]");
          var array_poly = JSON.parse(polygons[i].reg_regiao_alerta); 

          var polygon = L.polygon(array_poly,{
            color : 'red'
          }).addTo(map);
        }

        function converte_text_array(text){
          text_aux = text.substr(1, text.length - 2);
          
          String.prototype.replaceAll = function(str1, str2, ignore) {
            return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g,"\\$&"),(ignore?"gi":"g")),(typeof(str2)=="string")?str2.replace(/\$/g,"$$$$"):str2);
          }

          text_aux = text_aux.replaceAll('),(', ');(');
          text_split = text_aux.split(';');

          for(var i = 0; i < text_split.length; i++){
            text_split[i] = text_split[i].replace('(','');
            text_split[i] = text_split[i].replace(')','');
            text_split[i] = text_split[i].split(',');

            text_split[i][0] = parseFloat(text_split[i][0]);
            text_split[i][1] = parseFloat(text_split[i][1]);
          }    

          return text_split;
        }


        //TODA VEZ QUE OCORRE UM DOUBLE CLIQUE NO MAPA, AS VARIÁVEIS RECEBEM LATITUDE E LONGITUDE
        map.on('dblclick', function(e) {
          latitude = e.latlng.lat;
          longitude = e.latlng.lng;
          isMarker = 0;
          // alert(latitude + " " + longitude);
        })

        function addMark(){
          
          alert("Clique 2 vezes no lugar que gostaria de registrar a denúnica");
          $("#map").css("cursor", "pointer");
          $("#map").one("dblclick", function(){
            
            // map.zoomControl.disabled();
            $("#latitudemp").val(String(latitude));
            $("#longitudemp").val(String(longitude));
            $('.ui.modal').modal('show');
            $("#map").css("cursor", "");

          })
        } 

        $("#botao-marker").on("click", function(){
            map.addLayer( markersGroup );
            map.removeLayer( heat );
        })

        $("#botao-heat").on("click", function(){
            map.removeLayer( markersGroup );
            map.addLayer( heat );
        })

        $("#botao-pendente").on("click", function(){
            markersGroup.removeLayer(markersSolucionado);
            markersGroup.removeLayer(markersSemSolucao);
            markersGroup.addLayer(markersPendente);
        })

        $("#botao-semsolucao").on("click", function(){
            markersGroup.removeLayer(markersSolucionado);
            markersGroup.addLayer(markersSemSolucao);
            markersGroup.removeLayer(markersPendente);
        })

        $("#botao-solucionado").on("click", function(){
            markersGroup.addLayer(markersSolucionado);
            markersGroup.removeLayer(markersSemSolucao);
            markersGroup.removeLayer(markersPendente);
        })

        $("#botao-todas").on("click", function(){
          markersGroup.addLayer(markersSolucionado);
          markersGroup.addLayer(markersSemSolucao);
          markersGroup.addLayer(markersPendente);
        })

        $("#botao-guara").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == 'Guara' 
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
        })

        $("#botao-parque").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == 'Parque' 
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
        })

        $("#botao-cruzeiro").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == 'Cruzeiro' 
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
        })
        
        $("#botao-sobradinho").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == 'sobradinho' 
          })
        })

        $("#botao-plano").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Plano Piloto"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-gama").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Gama"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-taguatinga").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Taguatinga"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-brazlandia").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Brazlândia"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-sobradinho").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Sobradinho"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-planaltina").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Planaltina"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-paranoa").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Paranoá"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-sudoeste").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Sudoeste"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-candangolandia").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Candangolândia"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-sia").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "SIA"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-estrutural").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Estrutural"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-nb").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Núcleo Bandeirante"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-aguasclaras").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Águas Claras"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-vicente").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == "Vicente Pires"
          })
          console.log(markers_antigos);
          reajustaMarkers(markers_antigos)
          isMarkerInsidePolygon(converte_text_array(result[0].coordenadas));
          
        })

        $("#botao-samambaia").on('click', function(){
          var result = regioes.filter(regiao => {
            return regiao.nome == 'samambaia' 
          })
        })

        console.log(regioes);

        function filtro_regiao(polygon){
          for(var i = 0; i < markes.length; i++){
            coordenadas_marcador = {
              lat : markes[i].st_x,
              long : markes[i].st_y
            };
          }
        }

        function reajustaMarkers(markers_antigos){
          var i = 0;
          markersGroup.eachLayer(function (layer) {

            latitude = (layer.getLatLng().lat);
            longitude = (layer.getLatLng().lng);
            var x = latitude, y = longitude;

            if(x == -900000 && y == -999999999){
              newLatLng = new L.LatLng(markers_antigos[i][0], markers_antigos[i][1]);
              layer.setLatLng(markers_antigos[i]);
              i++;
            }
          })
        }

        function isMarkerInsidePolygon(polyPoints) {
          var latitude;
          var longitude;
          markers_antigos = [];
          markersGroup.eachLayer(function (layer) {
            // if(((layer.getLatLng().lat)= -15.7749913179298) && ((layer.getLatLng().lng)=-47.7952909469605)){
            //   layer.hide();
            // }
            latitude = (layer.getLatLng().lat);
            longitude = (layer.getLatLng().lng);

            

            var x = latitude, y = longitude;
            
            
            var inside = false;
            for (var i = 0, j = polyPoints.length - 1; i < polyPoints.length; j = i++) {
              var xi = polyPoints[i][0], yi = polyPoints[i][1];
              var xj = polyPoints[j][0], yj = polyPoints[j][1];

              var intersect = ((yi > y) != (yj > y))
                  && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
              if (intersect) inside = !inside;
            }

            if(inside == false){
              markers_antigos.push([x, y]);
              newLatLng = new L.LatLng(-900000, -999999999);
              layer.setLatLng(newLatLng);
              // map.removeLayer(layer);
              // layer.setOpacity(0);
            }
          });
        };

        

    </script>
  </body>
</html>
